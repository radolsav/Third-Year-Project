package malware.scan;

import org.apache.commons.io.IOUtils;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Base64;

/**
 * Created by Radoslav Ralinov on 02/03/2016. All rights reserved. Created as part of the Third Year Project
 * at University of Manchester. Third-Year-Project
 */
public class Quarantine {

    private static final String ENCRYPTION = "AES/CBC/PKCS5Padding";
    private static final String KEY_FILE_NAME = "encryption_keys.txt";
    private static File ENCRYPTION_KEY_FILE = new File(System.getProperty("user.dir") + "\\" + KEY_FILE_NAME);

    public static boolean encryptAES(Path path) {
        boolean result = false;
        try {
            KeyGenerator kg = KeyGenerator.getInstance("AES");
            kg.init(new SecureRandom());
            SecretKey key = kg.generateKey();
            Cipher cipher = Cipher.getInstance(ENCRYPTION);
            byte[] IV = new byte[16];
            SecureRandom random = new SecureRandom();
            random.nextBytes(IV);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(IV);
            cipher.init(Cipher.ENCRYPT_MODE, key, ivParameterSpec);
            InputStream inputStream = new FileInputStream(path.toString());
            byte[] fileBytes = org.apache.commons.io.IOUtils.toByteArray(inputStream);
            byte[] cipherText = cipher.doFinal(fileBytes);
            Files.write(path, cipherText);
            inputStream.close();

            String encodedKey = Base64.getEncoder().encodeToString(key.getEncoded());
            String iniVec = Base64.getEncoder().encodeToString(IV);
            if (!ENCRYPTION_KEY_FILE.exists()) {
                //noinspection ResultOfMethodCallIgnored
                ENCRYPTION_KEY_FILE.createNewFile();
                Writer out = new BufferedWriter(new FileWriter(ENCRYPTION_KEY_FILE, true));
//                PrintWriter out = new PrintWriter(keyFile);
                out.append(encodedKey).append(":").append(iniVec).append(":").append(path.getFileName().toString()).append("\n");
                out.close();
            } else {
                Writer writer = new BufferedWriter(new FileWriter(ENCRYPTION_KEY_FILE, true));
//                PrintWriter writer = new PrintWriter(new File());
                writer.append(encodedKey).append(":").append(iniVec).append(":").append(path.getFileName().toString()).append("\n");
                writer.close();
            }
            result =  true;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public static boolean decryptAES(Path path) {
        boolean result = false;
        try {
            String key = "";
            byte[] IV = new byte[16];
            ArrayList<String> keyData = readKeyData(ENCRYPTION_KEY_FILE);
            String lineToRemove = "";
            for (String data : keyData) {
                String[] splitData = data.split(":");
                if (splitData[2].equals(path.getFileName().toString())) {
                    key = splitData[0];
                    IV = Base64.getDecoder().decode(splitData[1]);
                    lineToRemove = data;
                }
            }
            keyData.remove(lineToRemove);
            Cipher cipher = Cipher.getInstance(ENCRYPTION);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(IV);
            byte[] decodedKey = Base64.getDecoder().decode(key);
            SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");

            cipher.init(Cipher.DECRYPT_MODE, originalKey, ivParameterSpec);

            byte[] cipherText = Files.readAllBytes(path);
            byte[] plainText = cipher.doFinal(cipherText);

            FileOutputStream file = new FileOutputStream(new File(path.toString()));
            IOUtils.write(plainText, file);
            PrintWriter writer = new PrintWriter(ENCRYPTION_KEY_FILE);
            if (keyData.isEmpty())
            {
                writer.print("");
            }
            keyData.forEach(writer::println);
            writer.close();
            result = true;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }


    private static ArrayList<String> readKeyData(File fileName) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            ArrayList<String> data = new ArrayList<>();
            String line = br.readLine();
            while (line != null) {
                data.add(line);
                line = br.readLine();
            }
            return data;
        }
    }


}
