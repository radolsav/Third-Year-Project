package malware.scan;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import io.orchestrate.client.*;
import org.ahocorasick.trie.Emit;
import org.ahocorasick.trie.Trie;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;

/**
 * Created by Radoslav Ralinov on 30/12/2015. All rights reserved. Created as part of the Third Year Project
 * at University of Manchester. Third-Year-Project
 */
public class SignatureCompare {

    private static final String HASH_COLLECTION = "HashSignatures";
    private static final String BYTE_COLLECTION = "ByteSignatures";

    @JsonIgnoreProperties
    public static ArrayList<HashSignature> compareHashSignatures(Client client, long size) {
   /* ByteSignature signature1 = new ByteSignature("sad","CustomVirus.exe");

        try{
            KvMetadata signatureMeta = client.postValue(BYTE_COLLECTION, signature1).get();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }*/
    /*KvObject<HashSignature> signatureKvObject =
            client.kv("HashSignatures", "0db20ca56640ae01")
                    .get(HashSignature.class)
                    .get();*/
        ArrayList<HashSignature> hashSignature = new ArrayList<>();
        try {
            String luceneQuery = "value.size: " + size;
            SearchResults<HashSignature> results =
                    client.searchCollection(HASH_COLLECTION)
                            .limit(20)
                            .get(HashSignature.class, luceneQuery)
                            .get(7500L, TimeUnit.MILLISECONDS);
            if (results.getCount() == 0) {
                System.out.println("No threat found!");
            } else {
                for (Result<HashSignature> signature : results) {
                    KvObject<HashSignature> kvObject = signature.getKvObject();
                    hashSignature.add(kvObject.getValue());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

   /* try {
      client.close();
    }
    catch (IOException exception)
    {
      exception.printStackTrace(System.err);
    }*/

        return hashSignature;
    }

    @JsonIgnoreProperties
    public static boolean compareByteSignatures(byte[] fileBytes, Trie trie) {
        /*String str = new String(fileBytes, "UTF-8"); // for UTF-8 encoding
        ByteSignature signature = new ByteSignature(str,"Eicar-test-signature2");
    KvMetadata signatureMeta = client.postValue("ByteSignatures", signature).get();*/
        Collection<Emit> emits;
        try {
            String stringBytes = new String(fileBytes, "UTF-8"); // for UTF-8 encoding
            emits = trie.parseText(stringBytes);
            return !emits.isEmpty();
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
        return false;
    }

    @JsonIgnoreProperties
    public static Trie constructTrie(Client client) {
        Trie trie = null;
        try {
            KvList<ByteSignature> results =
                    client.listCollection(BYTE_COLLECTION)
                            .get(ByteSignature.class)
                            .get();

            Trie.TrieBuilder trieBuilder = Trie.builder().removeOverlaps();
            for (KvObject<ByteSignature> signatureKvObject : results) {
                ByteSignature byteSignature = signatureKvObject.getValue();
                trieBuilder.addKeyword(byteSignature.getSignature());
            }
            trie = trieBuilder.build();
        } catch (ClassCastException exception) {
            exception.printStackTrace(System.err);
            System.out.println();
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }


        return trie;
    }
}


